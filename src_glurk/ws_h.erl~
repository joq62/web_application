-module(ws_h).

-export([init/2]).
-export([websocket_init/1]).
-export([websocket_handle/2]).
-export([websocket_info/2]).

-record(loop_state,{lampor,element,temp}).

init(Req, Opts) ->
	{cowboy_websocket, Req, Opts}.

websocket_init(State) ->
    io:format("Session started ~p~n",[{?MODULE,?LINE,State}]),
    LState=#loop_state{ lampor="off",element="off",temp="20"},
    Pid=spawn(fun()->loop(LState) end),
%	erlang:start_timer(1000, self(), <<"Hello!">>),
   
    Cmd="element",
    Value="off",
    Reply=list_to_binary(Cmd++","++Value),
    NewState=[{pid,Pid},{element,"off"}],
    {reply, {text, Reply}, NewState}.
%	{ok, [{pid,Pid},{element,"off"}]}.

websocket_handle({text, <<"init">>}, State) ->
    io:format("Init ~p~n",[{?MODULE,?LINE,State}]),
    {element,Status}=lists:keyfind(element,1,State),
    {Reply,NewState} = case Status of
		"off"->
		   % NewState=lists:keyreplace(element, 1, State, {element,"on"}),
		    Cmd="element",
		    Value="on",
		    {list_to_binary(Cmd++","++Value),
		     lists:keyreplace(element, 1, State, {element,"on"})};
		"on"->
		  %  NewState=lists:keyreplace(element, 1, State, {element,"off"}),
		    Cmd="element",
		    Value="off",
		    {list_to_binary(Cmd++","++Value),
		     lists:keyreplace(element, 1, State, {element,"off"})}
	    end,
    io:format("element, Msg ~p~n",[{?MODULE,?LINE,elemet_clicked,Reply}]),
    {reply, {text, Reply}, NewState};

websocket_handle({text, <<"element_clicked">>}, State) ->
    {element,Status}=lists:keyfind(element,1,State),
    {Reply,NewState} = case Status of
		"off"->
		   % NewState=lists:keyreplace(element, 1, State, {element,"on"}),
		    Cmd="element",
		    Value="on",
		    {list_to_binary(Cmd++","++Value),
		     lists:keyreplace(element, 1, State, {element,"on"})};
		"on"->
		  %  NewState=lists:keyreplace(element, 1, State, {element,"off"}),
		    Cmd="element",
		    Value="off",
		    {list_to_binary(Cmd++","++Value),
		     lists:keyreplace(element, 1, State, {element,"off"})}
	    end,
    io:format("element, Msg ~p~n",[{?MODULE,?LINE,elemet_clicked,Reply}]),
    {reply, {text, Reply}, NewState};
%    {reply, {text, << "element",":","on" >>}, State};

websocket_handle({text, <<"lampor_clicked">>}, State) ->
    Msg="lampor_clicked",
    io:format("text, Msg ~p~n",[{?MODULE,?LINE,text, lampor_clicked}]),
    {reply, {text, << "That's what she said! ", Msg/binary >>}, State};

websocket_handle({text, <<"avsluta_clicked">>}, State) ->
    Msg="avsluta_clicked",
    io:format("text, Msg ~p~n",[{?MODULE,?LINE,text, avsluta_clicked}]),
    {reply, {text, << "That's what she said! ", Msg/binary >>}, State};
websocket_handle(Data, State) ->
    io:format("Data =  ~p~n",[{?MODULE,?LINE,Data}]),
    {ok, State}.


websocket_info({timeout, _Ref, Msg}, State) ->
	erlang:start_timer(1000, self(), <<"How' you doin'?">>),
	{reply, {text, Msg}, State};
websocket_info(Info, State) ->
    io:format("Info ~p~n",[{?MODULE,?LINE,Info}]),
	{ok, State}.


loop(State)->
    NewState=receive
		 {Pid,{element_clicked}}->
		     case State#loop_state.element of
			 "off"->
			     Pid!{self(),"on"},
			     State#loop_state{element="on"};
			 "on" ->
			     Pid!{self(),"off"},
			     State#loop_state{element="off"}
		     end;
		 {Pid,{lamport_clicked}}->
		     case State#loop_state.lampor of
			 "off"->
			     Pid!{self(),"on"},
			     State#loop_state{lampor="on"};
			 "on" ->
			     Pid!{self(),"off"},
			     State#loop_state{lampor="off"}
		     end
	     end,
    loop(NewState).
